// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestTask.DAL;

#nullable disable

namespace TestTask.DAL.Migrations
{
    [DbContext(typeof(TestTaskDbContext))]
    partial class TestTaskDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TestTask.Domain.Entities.Commission", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CurrencyFromId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CurrencyToId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Value")
                        .HasPrecision(4, 2)
                        .HasColumnType("decimal(4,2)");

                    b.HasKey("Id");

                    b.ToTable("Commissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1e5ae49d-9d21-44e3-a35f-121d41c96f5c"),
                            CurrencyFromId = new Guid("91ee387d-153f-4614-a02a-5321d0f69bb1"),
                            CurrencyToId = new Guid("95d3abcd-05a9-48fe-9f28-ab0fe379387b"),
                            Value = 0.1m
                        },
                        new
                        {
                            Id = new Guid("29866c48-8153-4bb8-a438-010aee0a0f38"),
                            CurrencyFromId = new Guid("95d3abcd-05a9-48fe-9f28-ab0fe379387b"),
                            CurrencyToId = new Guid("91ee387d-153f-4614-a02a-5321d0f69bb1"),
                            Value = 0.21m
                        },
                        new
                        {
                            Id = new Guid("b3ff0421-30aa-4402-85e3-0d7c2ef618cc"),
                            CurrencyFromId = new Guid("78f83ec9-90ab-4ce0-a3d6-196372aa72a9"),
                            CurrencyToId = new Guid("91ee387d-153f-4614-a02a-5321d0f69bb1"),
                            Value = 0.14m
                        },
                        new
                        {
                            Id = new Guid("7dd318c2-b785-4ace-86fb-85cbfa3b7b4e"),
                            CurrencyFromId = new Guid("91ee387d-153f-4614-a02a-5321d0f69bb1"),
                            CurrencyToId = new Guid("78f83ec9-90ab-4ce0-a3d6-196372aa72a9"),
                            Value = 0.08m
                        },
                        new
                        {
                            Id = new Guid("9d04d7e2-cd09-4b46-8234-4fcbc534eb7d"),
                            CurrencyFromId = new Guid("95d3abcd-05a9-48fe-9f28-ab0fe379387b"),
                            CurrencyToId = new Guid("560e3524-1693-4fba-ade8-370da5b9a02b"),
                            Value = 0.15m
                        });
                });

            modelBuilder.Entity("TestTask.Domain.Entities.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AlphabeticCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("NumericCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.HasKey("Id");

                    b.HasIndex("AlphabeticCode")
                        .IsUnique();

                    b.HasIndex("NumericCode")
                        .IsUnique();

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("78f83ec9-90ab-4ce0-a3d6-196372aa72a9"),
                            AlphabeticCode = "USD",
                            NumericCode = "840",
                            Title = "United States Dollar"
                        },
                        new
                        {
                            Id = new Guid("560e3524-1693-4fba-ade8-370da5b9a02b"),
                            AlphabeticCode = "EUR",
                            NumericCode = "978",
                            Title = "Euro"
                        },
                        new
                        {
                            Id = new Guid("91ee387d-153f-4614-a02a-5321d0f69bb1"),
                            AlphabeticCode = "UAH",
                            NumericCode = "980",
                            Title = "Ukrainian Hryvnia"
                        },
                        new
                        {
                            Id = new Guid("0229db88-1778-45a7-8367-755e0e4936e8"),
                            AlphabeticCode = "GBP",
                            NumericCode = "826",
                            Title = "British Pound Sterling"
                        },
                        new
                        {
                            Id = new Guid("923a0172-2022-40e7-bc3d-05b6aa0cd5cc"),
                            AlphabeticCode = "JPY",
                            NumericCode = "392",
                            Title = "Japanese Yen"
                        },
                        new
                        {
                            Id = new Guid("95d3abcd-05a9-48fe-9f28-ab0fe379387b"),
                            AlphabeticCode = "RUB",
                            NumericCode = "643",
                            Title = "Russian Ruble"
                        });
                });

            modelBuilder.Entity("TestTask.Domain.Entities.MoneyAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Balance")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("UserId");

                    b.ToTable("MoneyAccounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4721de23-e8a4-4780-9c77-dbf5138705d4"),
                            Balance = 0m,
                            CurrencyId = new Guid("78f83ec9-90ab-4ce0-a3d6-196372aa72a9"),
                            UserId = new Guid("ecfe7076-acba-4d23-8cdb-2d954afb450a")
                        },
                        new
                        {
                            Id = new Guid("caf09fd6-c04c-4b2f-9939-60b6c36b7160"),
                            Balance = 0m,
                            CurrencyId = new Guid("78f83ec9-90ab-4ce0-a3d6-196372aa72a9"),
                            UserId = new Guid("78272231-c67b-4cf0-ae43-557b152b35fd")
                        },
                        new
                        {
                            Id = new Guid("2ea873c9-6720-4010-83d7-09527ee0244d"),
                            Balance = 0m,
                            CurrencyId = new Guid("560e3524-1693-4fba-ade8-370da5b9a02b"),
                            UserId = new Guid("ecfe7076-acba-4d23-8cdb-2d954afb450a")
                        },
                        new
                        {
                            Id = new Guid("dca585a8-3e6c-41df-bb0a-470e3ce650e3"),
                            Balance = 0m,
                            CurrencyId = new Guid("560e3524-1693-4fba-ade8-370da5b9a02b"),
                            UserId = new Guid("78272231-c67b-4cf0-ae43-557b152b35fd")
                        },
                        new
                        {
                            Id = new Guid("5a9c29c5-e1ee-4e42-87c5-f1b3d7d77055"),
                            Balance = 0m,
                            CurrencyId = new Guid("91ee387d-153f-4614-a02a-5321d0f69bb1"),
                            UserId = new Guid("ecfe7076-acba-4d23-8cdb-2d954afb450a")
                        },
                        new
                        {
                            Id = new Guid("a04ef95e-6fb0-4f41-a81a-f4e9cddff841"),
                            Balance = 0m,
                            CurrencyId = new Guid("91ee387d-153f-4614-a02a-5321d0f69bb1"),
                            UserId = new Guid("78272231-c67b-4cf0-ae43-557b152b35fd")
                        },
                        new
                        {
                            Id = new Guid("29299afb-8591-4c6b-a10a-785f74ff56b8"),
                            Balance = 0m,
                            CurrencyId = new Guid("0229db88-1778-45a7-8367-755e0e4936e8"),
                            UserId = new Guid("ecfe7076-acba-4d23-8cdb-2d954afb450a")
                        },
                        new
                        {
                            Id = new Guid("f5939608-cefe-490e-a6c6-3c9e78eb3645"),
                            Balance = 0m,
                            CurrencyId = new Guid("0229db88-1778-45a7-8367-755e0e4936e8"),
                            UserId = new Guid("78272231-c67b-4cf0-ae43-557b152b35fd")
                        },
                        new
                        {
                            Id = new Guid("e4730aa0-3b14-4b77-93f0-1f21fb4854ce"),
                            Balance = 0m,
                            CurrencyId = new Guid("923a0172-2022-40e7-bc3d-05b6aa0cd5cc"),
                            UserId = new Guid("ecfe7076-acba-4d23-8cdb-2d954afb450a")
                        },
                        new
                        {
                            Id = new Guid("a8cb3937-853f-4d01-9042-8e720c8fc8e1"),
                            Balance = 0m,
                            CurrencyId = new Guid("923a0172-2022-40e7-bc3d-05b6aa0cd5cc"),
                            UserId = new Guid("78272231-c67b-4cf0-ae43-557b152b35fd")
                        },
                        new
                        {
                            Id = new Guid("bec5fdbd-ca38-49a5-a0e9-c6071623dc5f"),
                            Balance = 0m,
                            CurrencyId = new Guid("95d3abcd-05a9-48fe-9f28-ab0fe379387b"),
                            UserId = new Guid("ecfe7076-acba-4d23-8cdb-2d954afb450a")
                        },
                        new
                        {
                            Id = new Guid("acba0c34-e0aa-4c58-aadd-9ba1ee925669"),
                            Balance = 0m,
                            CurrencyId = new Guid("95d3abcd-05a9-48fe-9f28-ab0fe379387b"),
                            UserId = new Guid("78272231-c67b-4cf0-ae43-557b152b35fd")
                        });
                });

            modelBuilder.Entity("TestTask.Domain.Entities.MoneyOperation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AppliedCommissionValue")
                        .HasPrecision(4, 4)
                        .HasColumnType("decimal(4,4)");

                    b.Property<decimal>("AppliedExchangeRate")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<Guid?>("MoneyAccountFromId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MoneyAccountToId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("MoneyAmount")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<string>("MoveType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("OperationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("OperationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MoneyOperations");
                });

            modelBuilder.Entity("TestTask.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e949b90f-172b-4478-bfba-b309341024f3"),
                            Title = "User"
                        },
                        new
                        {
                            Id = new Guid("1834f226-0d3e-4782-8bc6-45195c929baf"),
                            Title = "Admin"
                        });
                });

            modelBuilder.Entity("TestTask.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ecfe7076-acba-4d23-8cdb-2d954afb450a"),
                            Email = "penis@gmail.com",
                            FullName = "Mike Vazovskiy",
                            PasswordHash = "$2a$11$ppPf9PYy0HU/rlyBO14vgOi1Q2tBFcq9RIc73IXpS1/Sw7y2IxeKm"
                        },
                        new
                        {
                            Id = new Guid("78272231-c67b-4cf0-ae43-557b152b35fd"),
                            Email = "popka@gmail.com",
                            FullName = "John Doe",
                            PasswordHash = "$2a$11$N6v06ElDxQu2ehLHLQvxmeHTgBNzkgHX/vc0OAllW87BLDMbZXG3y"
                        });
                });

            modelBuilder.Entity("TestTask.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("ecfe7076-acba-4d23-8cdb-2d954afb450a"),
                            RoleId = new Guid("e949b90f-172b-4478-bfba-b309341024f3")
                        },
                        new
                        {
                            UserId = new Guid("ecfe7076-acba-4d23-8cdb-2d954afb450a"),
                            RoleId = new Guid("1834f226-0d3e-4782-8bc6-45195c929baf")
                        },
                        new
                        {
                            UserId = new Guid("78272231-c67b-4cf0-ae43-557b152b35fd"),
                            RoleId = new Guid("e949b90f-172b-4478-bfba-b309341024f3")
                        });
                });

            modelBuilder.Entity("TestTask.Domain.Entities.MoneyAccount", b =>
                {
                    b.HasOne("TestTask.Domain.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestTask.Domain.Entities.User", "User")
                        .WithMany("MoneyAccounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TestTask.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("TestTask.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestTask.Domain.Entities.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TestTask.Domain.Entities.User", b =>
                {
                    b.Navigation("MoneyAccounts");

                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
