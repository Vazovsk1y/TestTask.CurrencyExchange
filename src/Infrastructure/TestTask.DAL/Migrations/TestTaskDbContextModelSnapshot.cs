// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestTask.DAL;

#nullable disable

namespace TestTask.DAL.Migrations
{
    [DbContext(typeof(TestTaskDbContext))]
    partial class TestTaskDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TestTask.Domain.Entities.Commission", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CurrencyFromId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CurrencyToId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Value")
                        .HasPrecision(4, 2)
                        .HasColumnType("decimal(4,2)");

                    b.HasKey("Id");

                    b.ToTable("Commissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9baa1ddf-7294-431f-8701-6cbe66109a63"),
                            CurrencyFromId = new Guid("18081637-6a28-4de3-a797-4eb340092044"),
                            CurrencyToId = new Guid("e56277ad-bb5a-4fc8-b4ab-7b6cb56a4e6f"),
                            Value = 0.1m
                        },
                        new
                        {
                            Id = new Guid("58290782-772c-4e3e-af67-1435299ccaae"),
                            CurrencyFromId = new Guid("e56277ad-bb5a-4fc8-b4ab-7b6cb56a4e6f"),
                            CurrencyToId = new Guid("18081637-6a28-4de3-a797-4eb340092044"),
                            Value = 0.21m
                        },
                        new
                        {
                            Id = new Guid("90dddea6-03ba-4de6-bb34-c9c53d80cd35"),
                            CurrencyFromId = new Guid("fe59caa8-249c-4db5-b700-f40e3acade15"),
                            CurrencyToId = new Guid("18081637-6a28-4de3-a797-4eb340092044"),
                            Value = 0.14m
                        },
                        new
                        {
                            Id = new Guid("a22532ba-a850-425c-9ee8-19266e29bc26"),
                            CurrencyFromId = new Guid("18081637-6a28-4de3-a797-4eb340092044"),
                            CurrencyToId = new Guid("fe59caa8-249c-4db5-b700-f40e3acade15"),
                            Value = 0.08m
                        },
                        new
                        {
                            Id = new Guid("076b3d84-c7cb-423d-81bd-788e44f676a4"),
                            CurrencyFromId = new Guid("e56277ad-bb5a-4fc8-b4ab-7b6cb56a4e6f"),
                            CurrencyToId = new Guid("c9f2924e-523c-46b1-bdd1-404b3a972d41"),
                            Value = 0.15m
                        });
                });

            modelBuilder.Entity("TestTask.Domain.Entities.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AlphabeticCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("NumericCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.HasKey("Id");

                    b.HasIndex("AlphabeticCode")
                        .IsUnique();

                    b.HasIndex("NumericCode")
                        .IsUnique();

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fe59caa8-249c-4db5-b700-f40e3acade15"),
                            AlphabeticCode = "USD",
                            NumericCode = "840",
                            Title = "United States Dollar"
                        },
                        new
                        {
                            Id = new Guid("c9f2924e-523c-46b1-bdd1-404b3a972d41"),
                            AlphabeticCode = "EUR",
                            NumericCode = "978",
                            Title = "Euro"
                        },
                        new
                        {
                            Id = new Guid("18081637-6a28-4de3-a797-4eb340092044"),
                            AlphabeticCode = "UAH",
                            NumericCode = "980",
                            Title = "Ukrainian Hryvnia"
                        },
                        new
                        {
                            Id = new Guid("98d7a0df-d4af-4408-85e3-19ad0c74ed5b"),
                            AlphabeticCode = "GBP",
                            NumericCode = "826",
                            Title = "British Pound Sterling"
                        },
                        new
                        {
                            Id = new Guid("99b68f3a-c560-4b60-ae7a-b500828197e8"),
                            AlphabeticCode = "JPY",
                            NumericCode = "392",
                            Title = "Japanese Yen"
                        },
                        new
                        {
                            Id = new Guid("e56277ad-bb5a-4fc8-b4ab-7b6cb56a4e6f"),
                            AlphabeticCode = "RUB",
                            NumericCode = "643",
                            Title = "Russian Ruble"
                        });
                });

            modelBuilder.Entity("TestTask.Domain.Entities.MoneyAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Balance")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("UserId");

                    b.ToTable("MoneyAccounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("929586c8-7f25-4583-b105-60b0713cbeb2"),
                            Balance = 0m,
                            CurrencyId = new Guid("fe59caa8-249c-4db5-b700-f40e3acade15"),
                            UserId = new Guid("32810ebd-20d1-49d3-8846-e4760bf8a568")
                        },
                        new
                        {
                            Id = new Guid("0d65ddf5-ccd4-435e-9ff4-18757074e8f7"),
                            Balance = 0m,
                            CurrencyId = new Guid("fe59caa8-249c-4db5-b700-f40e3acade15"),
                            UserId = new Guid("ec38f2a7-5b5f-4422-8d61-0fd21a0c860e")
                        },
                        new
                        {
                            Id = new Guid("fcff9f53-9ee1-400f-83bf-3a1f2a59361f"),
                            Balance = 0m,
                            CurrencyId = new Guid("c9f2924e-523c-46b1-bdd1-404b3a972d41"),
                            UserId = new Guid("32810ebd-20d1-49d3-8846-e4760bf8a568")
                        },
                        new
                        {
                            Id = new Guid("215e66f0-4257-4961-a2c1-224d94bdc134"),
                            Balance = 0m,
                            CurrencyId = new Guid("c9f2924e-523c-46b1-bdd1-404b3a972d41"),
                            UserId = new Guid("ec38f2a7-5b5f-4422-8d61-0fd21a0c860e")
                        },
                        new
                        {
                            Id = new Guid("b5868064-8697-493e-b3a0-89025c1137f4"),
                            Balance = 0m,
                            CurrencyId = new Guid("18081637-6a28-4de3-a797-4eb340092044"),
                            UserId = new Guid("32810ebd-20d1-49d3-8846-e4760bf8a568")
                        },
                        new
                        {
                            Id = new Guid("d6a91e97-ae87-4f3d-8ff5-820dfe1ac513"),
                            Balance = 0m,
                            CurrencyId = new Guid("18081637-6a28-4de3-a797-4eb340092044"),
                            UserId = new Guid("ec38f2a7-5b5f-4422-8d61-0fd21a0c860e")
                        },
                        new
                        {
                            Id = new Guid("42ebedae-12ec-4427-bf30-bdf05121d839"),
                            Balance = 0m,
                            CurrencyId = new Guid("98d7a0df-d4af-4408-85e3-19ad0c74ed5b"),
                            UserId = new Guid("32810ebd-20d1-49d3-8846-e4760bf8a568")
                        },
                        new
                        {
                            Id = new Guid("75c62c2c-025a-40e9-beb7-a7f42350fbb7"),
                            Balance = 0m,
                            CurrencyId = new Guid("98d7a0df-d4af-4408-85e3-19ad0c74ed5b"),
                            UserId = new Guid("ec38f2a7-5b5f-4422-8d61-0fd21a0c860e")
                        },
                        new
                        {
                            Id = new Guid("483f4fa2-63a9-41b4-b482-e529bcc55ff4"),
                            Balance = 0m,
                            CurrencyId = new Guid("99b68f3a-c560-4b60-ae7a-b500828197e8"),
                            UserId = new Guid("32810ebd-20d1-49d3-8846-e4760bf8a568")
                        },
                        new
                        {
                            Id = new Guid("60d407e1-b513-4822-aa8c-560f4c5ff62c"),
                            Balance = 0m,
                            CurrencyId = new Guid("99b68f3a-c560-4b60-ae7a-b500828197e8"),
                            UserId = new Guid("ec38f2a7-5b5f-4422-8d61-0fd21a0c860e")
                        },
                        new
                        {
                            Id = new Guid("ed5a4252-47b4-4848-bed7-4e8483d49f2d"),
                            Balance = 0m,
                            CurrencyId = new Guid("e56277ad-bb5a-4fc8-b4ab-7b6cb56a4e6f"),
                            UserId = new Guid("32810ebd-20d1-49d3-8846-e4760bf8a568")
                        },
                        new
                        {
                            Id = new Guid("ea9b2daa-8b28-4d03-b0ea-dbea16b2b9a6"),
                            Balance = 0m,
                            CurrencyId = new Guid("e56277ad-bb5a-4fc8-b4ab-7b6cb56a4e6f"),
                            UserId = new Guid("ec38f2a7-5b5f-4422-8d61-0fd21a0c860e")
                        });
                });

            modelBuilder.Entity("TestTask.Domain.Entities.MoneyOperation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CommissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MoneyAccountFromId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MoneyAccountToId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("MoneyAmount")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<string>("MoveType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("OperationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("OperationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CommissionId");

                    b.ToTable("MoneyOperations");
                });

            modelBuilder.Entity("TestTask.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f0a5b9ba-08ec-4c37-ad09-601c3094a042"),
                            Title = "User"
                        },
                        new
                        {
                            Id = new Guid("b1deb257-494e-44db-9767-8a9aee44cc55"),
                            Title = "Admin"
                        });
                });

            modelBuilder.Entity("TestTask.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("32810ebd-20d1-49d3-8846-e4760bf8a568"),
                            Email = "penis@gmail.com",
                            FullName = "Mike Vazovskiy",
                            PasswordHash = "$2a$11$CJElh7xnoiJMrc62slsmZeYxNcfTJ83YohHQWx4.1hcAjsLmcDePu"
                        },
                        new
                        {
                            Id = new Guid("ec38f2a7-5b5f-4422-8d61-0fd21a0c860e"),
                            Email = "popka@gmail.com",
                            FullName = "John Doe",
                            PasswordHash = "$2a$11$qj0wZu3aGCy7NV7frR8q.utwvmPBVG91MJI5RbBTEoUerQbtVLJlO"
                        });
                });

            modelBuilder.Entity("TestTask.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("32810ebd-20d1-49d3-8846-e4760bf8a568"),
                            RoleId = new Guid("f0a5b9ba-08ec-4c37-ad09-601c3094a042")
                        },
                        new
                        {
                            UserId = new Guid("32810ebd-20d1-49d3-8846-e4760bf8a568"),
                            RoleId = new Guid("b1deb257-494e-44db-9767-8a9aee44cc55")
                        },
                        new
                        {
                            UserId = new Guid("ec38f2a7-5b5f-4422-8d61-0fd21a0c860e"),
                            RoleId = new Guid("f0a5b9ba-08ec-4c37-ad09-601c3094a042")
                        });
                });

            modelBuilder.Entity("TestTask.Domain.Entities.MoneyAccount", b =>
                {
                    b.HasOne("TestTask.Domain.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestTask.Domain.Entities.User", "User")
                        .WithMany("MoneyAccounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TestTask.Domain.Entities.MoneyOperation", b =>
                {
                    b.HasOne("TestTask.Domain.Entities.Commission", "Commission")
                        .WithMany()
                        .HasForeignKey("CommissionId");

                    b.Navigation("Commission");
                });

            modelBuilder.Entity("TestTask.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("TestTask.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestTask.Domain.Entities.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TestTask.Domain.Entities.User", b =>
                {
                    b.Navigation("MoneyAccounts");

                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
